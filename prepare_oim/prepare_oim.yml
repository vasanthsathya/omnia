# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Set_fact for fetch omnia config credentials
  hosts: localhost
  connection: local
  tags: always
  tasks:
    - name: Set dynamic run tags including 'prepare_oim'
      when: not config_file_status | default(false) | bool
      ansible.builtin.set_fact:
        omnia_run_tags: "{{ (ansible_run_tags | default([]) + ['prepare_oim']) | unique }}"
        cacheable: true

- name: Invoke validate_config.yml to perform L1 and L2 validations with prepare_oim tag
  ansible.builtin.import_playbook: ../input_validation/validate_config.yml
  tags: always

- name: Invoke get_config_credentials.yml
  ansible.builtin.import_playbook: ../utils/credential_utility/get_config_credentials.yml

- name: Include input project directory
  when: not project_dir_status | default(false) | bool
  ansible.builtin.import_playbook: ../utils/include_input_dir.yml
  tags: always

- name: Create oim group and provision group
  ansible.builtin.import_playbook: ../utils/create_container_group.yml
  vars:
    oim_group: true
    omnia_provision_group: true
  tags: always

- name: Prepare OIM Validation and Configure Known Hosts
  hosts: localhost
  connection: local
  gather_facts: false
  tags: always
  tasks:
    - name: Include prepare_oim_validation role  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: prepare_oim_validation

- name: Prepare kubespary image on OIM validation
  hosts: oim
  connection: ssh
  gather_facts: false
  tasks:
    - name: Include prepare_kubespray_validation role
      ansible.builtin.include_role:
        name: prepare_kubespray_validation
      loop: "{{ hostvars['localhost']['kubespray_versions'] | default([]) }}"
      loop_control:
        loop_var: kube_version

- name: Prepare OIM Validation and Configure Known Hosts
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Include create_inventory role  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: create_inventory

    - name: Add OIM to known hosts  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/common
        tasks_from: add_known_hosts.yml

- name: Deploy the PCS container
  hosts: oim
  connection: ssh
  gather_facts: false
  roles:
    - role: deploy_containers/common  # noqa:role-name[path]
    - role: deploy_containers/pcs  # noqa:role-name[path]
      tags: pcs

- name: Configure admin_ip with VIP if high availability is enabled
  hosts: localhost
  connection: local
  tags: oim_ha
  tasks:
    - name: Configure virtual IP as admin_ip task # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/common
        tasks_from: set_vip.yml

- name: Deploy all other containers
  hosts: oim
  connection: ssh
  gather_facts: false
  roles:
    - role: deploy_containers/provision  # noqa:role-name[path]
      tags: provision
    - role: deploy_containers/pulp  # noqa:role-name[path]
      tags: pulp
    - role: deploy_containers/kubespray  # noqa:role-name[path]
      tags: kubespray
    - role: deploy_containers/squid
      tags: squid
    - role: deploy_containers/idrac_telemetry  # noqa:role-name[path]
      tags: idrac_telemetry
    - role: deploy_containers/prometheus  # noqa:role-name[path]
      tags: prometheus
    - role: deploy_containers/grafana # noqa:role-name[path]
      tags: grafana
    - role: deploy_containers/loki  # noqa:role-name[path]
      tags: loki

- name: Update the kubespray metadata
  hosts: localhost
  connection: local
  tasks:
    - name: Update the kubespray metadata # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/kubespray
        tasks_from: create_kubespray_metadata.yml
      loop: "{{ hostvars['localhost']['k8s_versions'] | default([]) }}"
      loop_control:
        loop_var: k8s_version
      when:
        - hostvars['localhost']['k8s_support'] | default(false)
        - (hostvars[groups['oim'][0]]['kubespray_container_status']['containers'] | default([])) | length > 0
        - (hostvars[groups['oim'][0]]['kubespray_container_status']['containers'][0]['State']['Status'] | default('')) == 'running'


- name: Add all containers to known hosts on omnia core
  hosts: localhost
  connection: local
  gather_facts: false
  tags: always
  tasks:
    - name: Add provision container host keys to known_hosts of omnia_core  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/common
        tasks_from: add_known_hosts.yml
      vars:
        target_container: "omnia_provision"
        target_port: "2223"

    - name: Add kubespray container host keys to known_hosts of omnia_core  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/common
        tasks_from: add_known_hosts.yml
      vars:
        target_port: "{{ kubespray_ssh_port[kubespray_image_tag] }}"

- name: Configure Pulp container
  hosts: localhost
  connection: local
  tags: pulp
  tasks:
    - name: Configure Pulp container based on protocol
      block:
        - name: Configure Pulp HTTP container tasks
          ansible.builtin.include_role:
            name: deploy_containers/pulp
            tasks_from: create_pulp_config_http.yml
          when: not pulp_protocol_https

        - name: Configure Pulp HTTPS container tasks
          ansible.builtin.include_role:
            name: deploy_containers/pulp
            tasks_from: create_pulp_config_https.yml
          when: pulp_protocol_https

- name: Reload pulp nginx
  hosts: oim
  connection: ssh
  tags: pulp
  tasks:
    - name: Reload pulp nginx # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/pulp
        tasks_from: reload_pulp_nginx.yml
      when: hostvars['localhost']['pulp_protocol_https']

- name: Configure provision container
  hosts: omnia_provision
  connection: ssh
  tags: provision
  tasks:
    - name: Configure provision container and Omnia DB creation  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/provision
        tasks_from: configure_provision_container.yml

- name: Configure grafana datasource and dashboards
  hosts: oim
  connection: ssh
  tags: grafana
  tasks:
    - name: Configure grafana datasource and dashboards # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/grafana
        tasks_from: configure_grafana.yml

- name: Deploy PCS container resources
  hosts: oim
  connection: ssh
  tags: pcs
  tasks:
    - name: Create all PCS container resources # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/pcs
        tasks_from: deploy_pcs_container_resources.yml

- name: Fetch container images
  hosts: localhost
  connection: local
  gather_facts: false
  tags: oim_ha
  tasks:
    - name: Fetch container image list
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../common/tasks/common/get_container_image_list.yml"
      when: >
        hostvars['localhost']['omnia_share_option'] == 'NFS' and
        (
          (hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.enable_oim_ha | default(false)) or
          (hostvars['localhost']['has_service_role'] | default(false))
        )

- name: Save Container Images
  when: >
    hostvars['localhost']['omnia_share_option'] == 'NFS' and
    (
      (hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.enable_oim_ha | default(false)) or
      (hostvars['localhost']['has_service_role'] | default(false))
    )
  ansible.builtin.import_playbook: "{{ playbook_dir }}/../utils/save_container_images.yml"
  vars:
    container_images: "{{ hostvars['localhost']['container_images'] | default([]) }}"
    oim_group: false
  tags: oim_ha

- name: Prepare oim completion
  hosts: localhost
  connection: local
  tags: always
  tasks:
    - name: Prepare oim has completed  # noqa:role-name[path]
      ansible.builtin.include_role:
        name: deploy_containers/common
        tasks_from: prepare_oim_completion.yml

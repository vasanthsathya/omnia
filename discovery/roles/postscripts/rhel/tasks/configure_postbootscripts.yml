# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Determine xCAT group string for postscript modification
  ansible.builtin.set_fact:
    sn_oim_group_list: >-
      {{
        [ 'oim_ha_node' if omnia_oim_status | bool else '',
          'service_node' if service_node_status | bool else '' ]
        | select('!=', '') | list
      }}

- name: Set xcat_target_groups as comma-separated string
  ansible.builtin.set_fact:
    service_oim_groups: "{{ sn_oim_group_list | join(',') }}"

- name: Create a list of unique roles
  ansible.builtin.set_fact:
    all_roles: "{{ (all_roles | default([])) + ((item | default('') | string).split(',') | map('trim') | list) }}"
  loop: "{{ discovered_nodes | map(attribute='role') | select('defined') | list }}"
  when: item | length > 0

- name: Fetch list of unique supported roles
  ansible.builtin.set_fact:
    fetch_k8s_service_roles: "{{ all_roles | unique | select('in', k8s_service_cluster_roles) | list }}"

- name: Set xcat_target_groups for k8s service cluster as comma-separated string
  ansible.builtin.set_fact:
    k8s_service_groups: "{{ fetch_k8s_service_roles | join(',') }}"

- name: Configure postbootscripts
  ansible.builtin.command: "{{ xcat_path }}/chdef all postbootscripts=\"otherpkgs\""
  changed_when: true

- name: Configure postbootscripts
  ansible.builtin.command: >
    {{ xcat_path }}/chdef all -p
    postbootscripts="omnia_nic_autoconnect,confignetwork -s,omnia_hostname"
  changed_when: true

- name: Copy PCS postboot script to postscripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items: "{{ pcs_postbootscript_path }}"
  when: enable_oim_ha

- name: Copy service node postboot script to postscripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items: "{{ service_node_postbootscript_path }}"
  when: service_role_required

- name: Copy k8s service cluster postboot script to postscripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items: "{{ k8s_service_cluster_postbootscript_path }}"
  when: fetch_k8s_service_roles | length > 0

- name: Copy allow firewall postboot script to postscripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items: "{{ allow_firewall_postbootscript_path }}"
  when: service_oim_groups != ''

- name: Configure pcs container setup postbootscripts
  ansible.builtin.command: "{{ xcat_path }}/chdef oim_ha_node -p postbootscripts=\"omnia_oim_ha_node_postboot\""
  changed_when: true
  when: omnia_oim_status

- name: Configure service node postboot script to postscripts
  ansible.builtin.command: "{{ xcat_path }}/chdef service_node -p postbootscripts=\"omnia_service_node_postboot\""
  changed_when: true
  when: service_node_status

- name: Configure firewalld setup postbootscripts on service or OIM Ha node
  ansible.builtin.command: "{{ xcat_path }}/chdef {{ service_oim_groups }} -p postbootscripts=\"omnia_allow_firewall_ports\""
  changed_when: true
  when: service_oim_groups != ''

- name: Configure k8s service cluster postboot script to postscripts
  ansible.builtin.command: "{{ xcat_path }}/chdef {{ k8s_service_groups }} -p postbootscripts=\"omnia_k8s_service_cluster_postboot\""
  changed_when: true
  when: k8s_service_groups != ''

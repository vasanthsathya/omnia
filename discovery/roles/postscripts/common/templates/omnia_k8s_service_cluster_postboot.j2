#!/bin/bash
################################################################################################################
#  omnia_k8s_service_cluster_postboot:
#      Configure Omnia's K8's service cluster
#
#################################################################################################################
# Define log file
LOGFILE="/var/log/xcat/xcat.log"

log() {
  echo "$1" >> "$LOGFILE"
}

run_or_fail() {
  log "--- Running: $* ---"
  output=$("$@" 2>&1)
  if [ $? -ne 0 ]; then
    log "[ERROR]: Failed to run '$*'"
    log "[ERROR] MSG: $output"
    exit 1
  else
    log "[DEBUG] $output"
  fi
}

echo "--------------------------" >> "$LOGFILE"
echo "$(date) - INFO - Starting Omnia Service node postboot configuration" >> "$LOGFILE"


{% if omnia_share_option == "NFS" %}
# ports for nfs
firewall_ports=(
  "111/udp"
  "2049/tcp" "2049/udp"
)

# enable firewall service for nfs
firewall_services=(
  "nfs" "rpc-bind" "ntp"
)

# Ensure firewalld is installed
if ! rpm -q firewalld &>/dev/null; then
  echo "Installing firewalld..." >> "$LOGFILE"
  dnf install -y firewalld && echo "SUCCESS: firewalld installed successfully."  >> "$LOGFILE" || echo "ERROR: Failed to install firewalld."  >> "$LOGFILE"
fi

# Enable and start firewalld
echo "Enabling and starting firewalld...">> "$LOGFILE"
systemctl enable --now firewalld && echo "SUCCESS: firewalld enabled and started." >> "$LOGFILE" || echo "ERROR: Failed to enable/start firewalld." >> "$LOGFILE"

# Add ports
echo "Adding required ports to firewalld..." >> "$LOGFILE"
for port in "${firewall_ports[@]}"; do
  if firewall-cmd --permanent --add-port="$port"; then
    echo "SUCCESS: Allowed port: $port" >> "$LOGFILE"
  else
    echo "ERROR: Failed to allow port: $port" >> "$LOGFILE"
  fi
done

# Add services
echo "Adding required services to firewalld..." >> "$LOGFILE"
for service in "${firewall_services[@]}"; do
  if firewall-cmd --permanent --add-service="$service"; then
    echo "SUCCESS: Allowed service: $service" >> "$LOGFILE"
  else
    echo "ERROR: Failed to allow service: $service" >> "$LOGFILE"
  fi
done

# Reload firewall
if firewall-cmd --reload; then
  echo "SUCCESS: firewalld reloaded successfully." >> "$LOGFILE"
else
  echo "ERROR: Failed to reload firewalld." >> "$LOGFILE"
fi

# Create omnia_path directory if it does not exist
echo "Creating omnia shared path directory if it does not exist" >> "$LOGFILE"
mkdir -p {{ oim_shared_path }}

# Validate if NFS server is reachable
echo "Validating if NFS server is reachable" >> "$LOGFILE"
ping -c1 -W1 {{ nfs_server_ip }} > /dev/null
if [ $? -ne 0 ]; then
    echo -e "NFS server {{ nfs_server_ip }} is not reachable." >> "$LOGFILE"
    exit 1
fi

# Mount NFS server share path in Omnia share path
echo "Mounting NFS server share path in Omnia share path" >> "$LOGFILE"
mount -t nfs -o nosuid,rw,sync,hard,intr,timeo=30 {{ nfs_server_ip }}:{{ nfs_server_share_path }} {{ oim_shared_path }}

# Validate if NFS server share path is mounted
echo "Validating if NFS server share path is mounted" >> "$LOGFILE"
if grep -qs "{{ nfs_server_ip }}:{{ nfs_server_share_path }}" /proc/mounts; then
    echo -e "SUCCESS: NFS server share path is mounted." >> "$LOGFILE"
else
    echo -e "ERROR: NFS server share path is not mounted. Provide valid NFS server details" >> "$LOGFILE"
    exit 1
fi

# Add NFS server share to /etc/fstab to mount on startup
echo "Adding entry in /etc/fstab for mount on startup"
echo "{{ nfs_server_ip }}:{{ nfs_server_share_path }} {{ oim_shared_path }} nfs nosuid,rw,sync,hard,intr" >> /etc/fstab

# Applying mount based on fstab entry
run_or_fail mount -a

{% endif %}

echo "$(date) - INFO - Finished Omnia K8's Service cluster postboot configuration" >> "$LOGFILE"
echo "---------------------------"

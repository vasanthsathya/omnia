# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set Facts for composable roles data
  ansible.builtin.set_fact:
    composable_roles_output: "{{ hostvars['localhost']['composable_roles_output'] }}"

- name: Set Facts for composable roles data
  ansible.builtin.set_fact:
    roles_data: "{{ composable_roles_output.roles_data }}"
    groups_data: "{{ composable_roles_output.groups_data }}"
    roles_groups_data: "{{ composable_roles_output.roles_groups_data }}"
    bmc_static_status: "{{ composable_roles_output.bmc_static_status }}"
    switch_status: "{{ composable_roles_output.switch_status }}"
    groups_roles_info: "{{ composable_roles_output.groups_roles_info }}"

- name: Validate in OIM HA if respective roles are defined
  when: (enable_oim_ha and not 'oim_ha_node' in roles_data)
  ansible.builtin.fail:
    msg: "{{ oim_ha_node_not_found_msg }}"

- name: Validate in service HA if respective roles are defined
  when: (enable_service_ha and not 'service_node' in roles_data)
  ansible.builtin.fail:
    msg: "{{ service_node_not_found_msg }}"

- name: Fail if enable_OIM_ha is true, but NFS is not configured
  when: (enable_oim_ha or enable_service_ha or 'service_node' in roles_data) and not nfs_used
  ansible.builtin.fail:
    msg: "{{ nfs_not_configured }}"

- name: Fail if Internal NFS is used with HA
  when: nfs_used and nfs_type == "internal" and (enable_oim_ha or enable_service_ha)
  ansible.builtin.fail:
    msg: "{{ ha_nfs_error_msg }}"

- name: Warn if internal NFS is used with service_node role
  when: nfs_used and nfs_type == "internal" and
        ('service_node' in roles_data)
  ansible.builtin.pause:
    prompt: >
      {{ nfs_internal_warning_msg }}
    seconds: "{{ warning_wait_time_10s }}"

- name: Fail if service k8s cluster role is defined but external NFS is not configured
  when: >
    ('service_kube_control_plane' in roles_data) and
    (not nfs_used or (nfs_type | default('') != 'external'))
  ansible.builtin.fail:
    msg: >-
      {{ nfs_not_configured if not nfs_used else service_cluster_nfs_error_msg }}

- name: Fail if service_node is there and no compute layer groups has parent field
  ansible.builtin.fail:
    msg: "{{ service_node_no_parent_msg | replace('\n', ' ') }}"
  when:
    - "'management_layer' not in ansible_run_tags"
    - "'service_node' in roles_data"
    - groups_roles_info | dict2items
      | selectattr('value.parent', 'truthy')
      | list | length == 0

- name: Verify if tarballs for container images exist
  ansible.builtin.include_tasks: "{{ role_path }}/../../../../common/tasks/common/validate_image_tars.yml"
  when: (enable_oim_ha or enable_service_ha or 'service_node' in roles_data)

- name: Fetch hierarchical data
  check_hierarchical_provision:
    groups_roles_info: "{{ groups_roles_info }}"
    service_node_ha_data: "{{ service_node_ha_data }}"
  register: hierarchical_output
  when: '"management_layer" not in ansible_run_tags'

- name: Set fact for service_node role required and other facts
  ansible.builtin.set_fact:
    service_role_required: "{{ 'true' if 'service_node' in roles_groups_data else 'false' }}"
    oim_ha_role_required: "{{ 'true' if 'oim_ha_node' in roles_groups_data else 'false' }}"
    booted_service_nodes_data: "{{ hierarchical_output.booted_service_nodes_data | default({}) }}"
    hierarchical_provision_status: "{{ hierarchical_output.hierarchical_provision_status | default(false) }}"
    groups_roles_info: "{{ hierarchical_output.groups_roles_info | default(groups_roles_info) }}"

- name: Create and update service node metadata file
  ansible.builtin.copy:
    dest: "{{ service_node_metadata_path }}"
    content: "{{ {'service_nodes_metadata': booted_service_nodes_data} | to_yaml }}"
    mode: "{{ metadata_perm }}"
    force: true

- name: Get the group(s) for OIM HA
  when:
    - oim_ha_role_required
    - enable_oim_ha | default(False)
  ansible.builtin.set_fact:
    oim_ha_groups: "{{ roles_data['oim_ha_node']['groups'] | default([]) }}"

- name: Display filtered group wise details
  ansible.builtin.debug:
    msg: "{{ groups_roles_info }}"
    verbosity: 2
  when: bmc_static_status or switch_status

- name: Warn if hierarchical_provision_status is false and service_node role present in roles_groups_data
  ansible.builtin.pause:
    prompt: "{{ hierarchical_provision_warning_msg }}"
    seconds: "{{ warning_wait_time_10s }}"
  when:
    - "'management_layer' not in ansible_run_tags"
    - not hierarchical_provision_status
    - "'service_node' in roles_data"

# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Load software_config.json as user_config
  block:
    - name: Load software_config.json as user_config
      ansible.builtin.include_vars:
        file: "{{ software_config_file }}"
        name: software_config
      register: include_software_config
      no_log: true
  rescue:
    - name: Failed to load software_config.json as user_config
      ansible.builtin.fail:
        msg: "{{ software_config_syntax_fail_msg }} Error: {{ include_software_config.message }}"

- name: Check downloaded software log - software.csv file exists
  ansible.builtin.stat:
    path: "{{ downloaded_sw_log_csv }}"
  register: sw_log_file

- name: Fail if software download log file not found
  ansible.builtin.fail:
    msg: "{{ local_repo_service_missing_msg }}"
  when: not sw_log_file.stat.exists

- name: Read software.csv content
  ansible.builtin.slurp:
    path: "{{ downloaded_sw_log_csv }}"
  register: sw_log_content
  when: sw_log_file.stat.exists

- name: Decode content and check if it contains service_node,success
  ansible.builtin.set_fact:
    sw_log_lines: "{{ sw_log_content.content | b64decode | split('\n') }}"

# - name: Set service_node_downloaded true if line is present
#   ansible.builtin.set_fact:
#     service_node_downloaded: true
#   when:
#     - "'service_node,success' in sw_log_lines"

# - name: Fail if service_node,success not found
#   ansible.builtin.fail:
#     msg: "{{ local_repo_sn_missing_msg }}"
#   when: service_node_downloaded is not defined

- name: Set service_k8s_downloaded true if line is present
  ansible.builtin.set_fact:
    service_k8s_downloaded: true
  when:
    - "'service_k8s,success' in sw_log_lines"

- name: Fail if service_k8s,success not found
  ansible.builtin.fail:
    msg: "{{ local_repo_service_missing_msg }}"
  when: service_k8s_downloaded is not defined

- name: Proceed with telemetry validation if telemetry entry present in software_config.json
  when: service_k8s_downloaded
  block:
    - name: Get cluster_os_type from software_config.json
      ansible.builtin.set_fact:
        cluster_os_type: "{{ software_config['cluster_os_type'] }}"

    - name: Get cluster_os_version from software_config.json
      ansible.builtin.set_fact:
        cluster_os_version: "{{ software_config['cluster_os_version'] }}"

    # - name: Load service_node.json
    #   ansible.builtin.set_fact:
    #     service_node_packages: "{{ lookup('file', sn_packages_file) | from_json }}"

    - name: Load service_k8s.json
      ansible.builtin.set_fact:
        telemetry_packages: "{{ lookup('file', k8s_packages_file) | from_json }}"

    # - name: Extract service_node.json and set facts for pip_modules and python_version
    #   ansible.builtin.set_fact:
    #     python_package_name: >-
    #       {{ service_node_packages['service_node']['cluster']
    #       | selectattr('type', 'equalto', 'rpm')
    #       | selectattr('package', 'search', 'python3')
    #       | map(attribute='package') | join }}
    #     sn_pip_packages: >-
    #       {{ service_node_packages['service_node']['cluster']
    #         | selectattr('type', 'equalto', 'pip_module')
    #         | map(attribute='package')
    #         | list }}

    - name: Extract service_k8s.json and set facts for pip_modules and python_version
      ansible.builtin.set_fact:
        python_package_name: >-
          {{ telemetry_packages['service_k8s']['cluster']
          | selectattr('type', 'equalto', 'rpm')
          | selectattr('package', 'search', 'python3')
          | map(attribute='package') | join }}
        k8s_pip_packages: >-
          {{ telemetry_packages['service_k8s']['cluster']
            | selectattr('type', 'equalto', 'pip_module')
            | map(attribute='package')
            | list }}

- name: Extract python version from python package name
  ansible.builtin.set_fact:
    python_version: "{{ python_package_name }}"

- name: Include local_repo_access.yml
  ansible.builtin.include_vars: "{{ local_repo_access_path }}"

- name: Set pulp content origin value
  ansible.builtin.set_fact:
    offline_pip_module_path: "{{ offline_pip_module_path }}"

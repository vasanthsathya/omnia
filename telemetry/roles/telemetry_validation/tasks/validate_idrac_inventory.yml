# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Validate BMC group data file exists
  ansible.builtin.stat:
    path: "{{ bmc_group_data_filename }}"
  register: bmc_group_data_stat

- name: Fail if BMC group data file does not exist
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_file_not_found_msg }}"
  when: not bmc_group_data_stat.stat.exists

- name: Read BMC group data
  ansible.builtin.set_fact:
    bmc_group_data: "{{ lookup('file', bmc_group_data_filename).splitlines() }}"

- name: Validate BMC group data headers
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_invalid_msg }}'"
  when: bmc_group_data[0] != bmc_group_data_headers

- name: Extract headers
  ansible.builtin.set_fact:
    bmc_headers: "{{ bmc_group_data[0].split(',') }}"

- name: Parse BMC group data CSV into list of dicts
  ansible.builtin.set_fact:
    bmc_dict_list: "{{ bmc_dict_list | default([]) + [dict(bmc_headers | zip(item.split(',')) | list)] }}"
  loop: "{{ bmc_group_data[1:] }}"

- name: Fail if bmc entries missing
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_empty_msg }}"
  when: bmc_dict_list is not defined or bmc_dict_list | length == 0

- name: Validate each BMC_IP in bmc_dict_list
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_invalid_ip_msg }} : {{ item.BMC_IP }}"
  when: item.BMC_IP is not match('^\\d{1,3}(\\.\\d{1,3}){3}$')
  loop: "{{ bmc_dict_list }}"

- name: Extract BMC_IP values for federated telemetry
  when: hostvars['localhost']['federated_idrac_telemetry_collection']
  block:
    - name: Group compute node BMC_IPs by service node
      ansible.builtin.set_fact:
        sn_bmc_ips: >-
          {{
            dict(
              bmc_dict_list
              | selectattr('PARENT', 'truthy')
              | groupby('PARENT')
              | map('first')
              | zip(
                  bmc_dict_list
                  | selectattr('PARENT', 'truthy')
                  | groupby('PARENT')
                  | map('last')
                  | map('map', attribute='BMC_IP')
                  | map('list')
                )
            )
          }}

    - name: Group service_nodes BMC_IPs
      ansible.builtin.set_fact:
        oim_bmc_ips: >-
          {{
            bmc_dict_list
            | selectattr('PARENT', 'falsy')
            | map(attribute='BMC_IP')
            | list
          }}

    - name: Combine all BMC IP groups
      ansible.builtin.set_fact:
        bmc_ips: >-
          {{
            sn_bmc_ips | combine({ 'oim': oim_bmc_ips })
          }}

- name: Extract all unique BMC_IP values
  ansible.builtin.set_fact:
    bmc_ips: >-
      {{
        {
          'oim': bmc_dict_list
                 | map(attribute='BMC_IP')
                 | unique
                 | list
        }
      }}
  when: not hostvars['localhost']['federated_idrac_telemetry_collection']

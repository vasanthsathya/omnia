# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Set_fact for fetch omnia config credentials
  hosts: localhost
  connection: local
  tasks:
    - name: Set dynamic run tags including 'telemetry'
      ansible.builtin.set_fact:
        omnia_run_tags: "{{ (ansible_run_tags | default([]) + ['telemetry']) | unique }}"
        cacheable: true

- name: Invoke validate_config.yml to perform L1 and L2 validations
  ansible.builtin.import_playbook: ../input_validation/validate_config.yml

- name: Invoke get_config_credentials.yml
  ansible.builtin.import_playbook: ../utils/credential_utility/get_config_credentials.yml

- name: Include input project directory
  when: not project_dir_status | default(false) | bool
  ansible.builtin.import_playbook: ../utils/include_input_dir.yml

- name: Create provision container group
  ansible.builtin.import_playbook: ../utils/create_container_group.yml
  vars:
    oim_group: true

- name: Validate telemetry input parameters
  hosts: localhost
  connection: local
  any_errors_fatal: true
  tasks:
    - name: Validate telemetry input parameters
      ansible.builtin.include_role:
        name: telemetry_validation
        tasks_from: validation_status_check.yml

- name: Validate containers are running
  hosts: oim
  connection: ssh
  tasks:
    - name: Validate telemetry container is running
      ansible.builtin.include_role:
        name: telemetry_validation
        tasks_from: validate_telemetry_container.yml
      loop:
        - "activemq"
        - "idrac_telemetry_receiver"
        - "mysqldb"
      loop_control:
        loop_var: telemetry_container
      when:
        - hostvars['localhost']['idrac_telemetry_support']
        - not hostvars['localhost']['federated_idrac_telemetry_collection']

# - name: Update Repositories/Registries on nodes
#   ansible.builtin.import_playbook: ../utils/update_user_repo.yml
#   when: not ( hostvars['127.0.0.1']['update_user_repo_executed'] | default(false) | bool )

- name: Configure oim ha node for telemetry
  hosts: oim_ha_node,active_oim_node
  connection: ssh
  gather_facts: false
  roles:
    - oim_ha_node_config

# Commenting service node tasks. This will be enabled in future
# - name: Render template for telemetry
#   hosts: localhost
#   connection: local
#   gather_facts: false
#   tasks:
#     - name: Render template for telemetry
#       ansible.builtin.include_role:
#         name: service_node_config
#         tasks_from: render_telemetry_template.yml

# - name: Configure service nodes for telemetry
#   hosts: sn_admin
#   connection: ssh
#   gather_facts: false
#   roles:
#     - service_node_config

# - name: Deployment of telemetry container in service node
#   hosts: sn_active
#   connection: ssh
#   gather_facts: false
#   tasks:
#     - name: Deployment of telemetry container in service node
#       ansible.builtin.include_role:
#         name: service_node_config
#         tasks_from: pcs_container_deployment.yml

# - name: Update prometheus configuration in OIM
#   hosts: oim
#   connection: ssh
#   gather_facts: false
#   tasks:
#     - name: Render PCS template for telemetry
#       ansible.builtin.include_role:
#         name: service_node_config
#         tasks_from: prometheus_config_update.yml

- name: Deployment of telemetry pods in service cluster
  hosts: kube_control_plane
  connection: ssh
  gather_facts: false
  tasks:
    - name: Deployment of telemetry pods
      ansible.builtin.include_role:
        name: service_k8s_telemetry

- name: Enable idrac telemetry in OIM
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Enable idrac telemetry
      ansible.builtin.include_role:
        name: idrac_telemetry

- name: Initiate telemetry collection on OIM
  hosts: oim
  connection: ssh
  gather_facts: false
  tasks:
    - name: Initiate telemetry collection
      ansible.builtin.include_role:
        name: idrac_telemetry
        tasks_from: trigger_telemetry_collection.yml
      when:
        - hostvars['localhost']['telemetry_idrac'] is defined
        - (hostvars['localhost']['telemetry_idrac'] | length > 0)

# - name: Enable idrac telemetry in SN
#   hosts: sn_active
#   connection: ssh
#   gather_facts: false
#   tasks:
#     - name: Enable idrac telemetry
#       ansible.builtin.include_role:
#         name: idrac_telemetry

#     - name: Initiate telemetry collection
#       ansible.builtin.include_role:
#         name: idrac_telemetry
#         tasks_from: trigger_telemetry_collection.yml
#       when:
#         - telemetry_idrac is defined
#         - (telemetry_idrac | length > 0)

# - name: Reload prometheus config
#   hosts: localhost
#   connection: local
#   gather_facts: false
#   tasks:
#     - name: Reload prometheus config
#       ansible.builtin.include_role:
#         name: idrac_telemetry
#         tasks_from: prometheus_config_reload.yml

- name: Telemetry report overview
  hosts: localhost
  connection: ssh
  gather_facts: false
  vars:
    node_host: "{{ hostvars[inventory_hostname]['service_tag'] if inventory_hostname != 'localhost' else 'oim' }}"
    telemetry_report: |
          ---- Telemetry Report Overview ({{ node_host }}) ----

          IP count with Telemetry not supported: {{ failed_idrac_count | int + invalid_idrac_count | int }}
          IP count with Telemetry activated in current execution: {{ telemetry_idrac_count | int }}

          {% if (failed_idrac_count | int + invalid_idrac_count | int) > 0 %}
          Potential reasons for telemetry not being initiated include Redfish connectivity problems, timeout issues,
          iDRAC datacenter license constraints, or firmware-related problems.
          {% endif %}
          {% if idrac_redfish_disabled | length > 0 %}
          IPs with Redfish disabled:
          {% for item in idrac_redfish_disabled %}
            - {{ item }}
          {% endfor %}
          {% endif %}
          {% if idrac_invalid_creds | length > 0 %}
          IPs with invalid credentials:
          {% for item in idrac_invalid_creds %}
            - {{ item }}
          {% endfor %}
          {% endif %}
          {% if idrac_unreachable | length > 0 %}
          IPs with unreachable BMC:
          {% for item in idrac_unreachable %}
            - {{ item }}
          {% endfor %}
          {% endif %}
          {% if failed_idrac | length > 0 %}
          Telemetry not supported because of iDRAC Datacenter license constraints or firmware issues.
          IPs List:
          {% for item in failed_idrac %}
            - {{ item }}
          {% endfor %}
          {% endif %}

  tasks:
    - name: Telemetry Report Overview
      ansible.builtin.debug:
        msg: "{{ telemetry_report.splitlines() }}"
      when: hostvars['localhost']['idrac_telemetry_support']

- name: Detailed Telemetry Report
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    telemetry_report_path_oim: "/opt/omnia/telemetry/idrac_telemetry_report.yml"
  tasks:
    - name: Detailed Telemetry Report
      ansible.builtin.debug:
        msg: "Check the file at {{ telemetry_report_path_oim }} in omnia_core container for detailed telemetry report."
      when: hostvars['localhost']['idrac_telemetry_support']

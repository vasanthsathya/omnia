# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Set_fact for fetch omnia config credentials
  hosts: localhost
  connection: local
  tasks:
    - name: Set dynamic run tags including k8s
      ansible.builtin.set_fact:
        omnia_run_tags: "{{ (ansible_run_tags | default([]) + ['k8s', 'slurm']) | unique }}"
        cacheable: true

- name: Invoke get_config_credentials.yml
  ansible.builtin.import_playbook: ../utils/credential_utility/get_config_credentials.yml
  when: not ( hostvars['127.0.0.1']['config_file_status'] | default(false) | bool )

- name: Include input project directory
  ansible.builtin.import_playbook: ../utils/include_input_dir.yml
  when: not ( hostvars['127.0.0.1']['project_dir_status'] | default(false) | bool )

- name: Update Inventory with ansible_host information
  ansible.builtin.import_playbook: ../utils/servicetag_host_mapping.yml
  when: not ( hostvars['127.0.0.1']['update_inventory_executed'] | default(false) | bool )

- name: Set fact for compute k8s playbook
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set fact for compute k8s playbook
      ansible.builtin.set_fact:
        compute_k8s_playbook: true

- name: Validate inventory
  ansible.builtin.import_playbook: ../utils/inventory_validation.yml
  when: not ( hostvars['127.0.0.1']['inventory_validation_executed'] | default(false) | bool )

- name: Gather facts from all the nodes
  hosts: login, kube_control_plane, kube_node, etcd
  gather_facts: true

- name: Validate scheduler input parameters
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Validate scheduler input parameters
      ansible.builtin.include_role:
        name: cluster_validation
        tasks_from: validation_status_check.yml

- name: Invoke validate_config.yml to perform L1 and L2 validations for k8s
  ansible.builtin.import_playbook: ../input_validation/validate_config.yml
  when:
    - hostvars['127.0.0.1']['k8s_support']

- name: Update Repositories/Registries on nodes
  ansible.builtin.import_playbook: ../utils/update_user_repo.yml
  when: not ( hostvars['127.0.0.1']['update_user_repo_executed'] | default(false) | bool )

- name: Create kubespray container group
  ansible.builtin.import_playbook: ../utils/create_container_group.yml
  vars:
    omnia_kubespray_group: true
    omnia_kubespray_validation: true
  when: hostvars['127.0.0.1']['k8s_support']

- name: Prepare kube control plane, kube nodes and etcd for kubernetes installations
  hosts: kube_control_plane, kube_node, etcd
  gather_facts: false
  any_errors_fatal: true
  roles:
    - k8s_prepare_nodes

- name: Start Kubernetes Installations
  ansible.builtin.import_playbook: playbooks/k8s_install.yml
  when:
    - hostvars['127.0.0.1']['k8s_support']
    - not hostvars[groups['kube_control_plane'][0]]['k8s_installation_status']

- name: Check k8s installation status
  hosts: kube_control_plane
  tasks:
    - name: Check k8s installation status
      ansible.builtin.include_tasks: roles/k8s_prepare_nodes/tasks/fetch_k8s_nodes.yml

- name: Set fact k8s var file flag
  hosts: localhost
  tasks:
    - name: Set fact k8s var file flag
      when:
        - hostvars['127.0.0.1']['k8s_support']
        - hostvars[groups['kube_control_plane'][0]]['k8s_installation_status']
        - hostvars['127.0.0.1']['enable_k8s_ha']
      ansible.builtin.set_fact:
        k8s_var_file_flag: true

- name: Start Kubernetes HA Installations
  ansible.builtin.import_playbook: playbooks/k8s_install.yml
  when:
    - hostvars['127.0.0.1']['k8s_support']
    - hostvars[groups['kube_control_plane'][0]]['k8s_installation_status']
    - hostvars['127.0.0.1']['enable_k8s_ha']
    - not hostvars[groups['kube_control_plane'][0]]['kube_vip_present']

- name: Add nodes to kubernetes cluster
  ansible.builtin.import_playbook: playbooks/k8s_add_node_install.yml
  when:
    - hostvars['127.0.0.1']['k8s_support']
    - hostvars[groups['kube_control_plane'][0]]['k8s_installation_status']
    - hostvars[groups['kube_control_plane'][0]]['k8s_new_nodes'] != ''

- name: Update containerd config on nodes
  hosts: kube_control_plane, kube_node
  gather_facts: false
  roles:
    - update_containerd_config

- name: Pull k8s images
  hosts: kube_control_plane, kube_node, etcd
  gather_facts: false
  any_errors_fatal: true
  roles:
    - k8s_prepare_images

- name: Deploy plugins on kube control nodes
  hosts: kube_control_plane[0]
  gather_facts: false
  roles:
    - common_plugins

- name: Install nvidia-container-toolkit on nodes with Nvidia GPU
  hosts: kube_control_plane, kube_node, etcd
  gather_facts: false
  roles:
    - k8s_nvidia_container_toolkit

- name: Install Plugin only when one of nodes with AMD GPU
  hosts: kube_control_plane, kube_node, etcd
  gather_facts: false
  roles:
    - k8s_amd

- name: Install Slurm
  hosts: slurm_control_node, slurm_node, login
  any_errors_fatal: true
  roles:
    - slurm

- name: Compile and install the ucx and openmpi on the nfs share of compute nodes
  hosts: slurm_control_node, kube_control_plane
  gather_facts: true
  roles:
    - install_benchmarks_tools

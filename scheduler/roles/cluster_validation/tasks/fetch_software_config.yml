#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialise variables
  ansible.builtin.set_fact:
    k8s_support: false
    compute_k8s_support: false
    service_k8s_support: false
    slurm_support: false
    set_intel_config_status: false
    set_intel_input_status: false
    set_intelgaudi_input_status: false
    nvidia_gpu_operator_support: false
    plugins_deployment: true

- name: Load software_config.json
  ansible.builtin.include_vars:
    file: "{{ software_config_json_file }}"
    name: software_config

# Check if k8s is mentioned in software_config.json
- name: Check if k8s support is true
  ansible.builtin.set_fact:
    compute_k8s_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'k8s') | list | length > 0 }}"

- name: Check if service k8s support is true
  ansible.builtin.set_fact:
    service_k8s_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'service_k8s') | list | length > 0 }}"

- name: Validate service k8s playbook
  when: service_k8s_playbook is defined
  block:
    - name: Set k8s_support to true when service_k8s_support is true
      ansible.builtin.set_fact:
        k8s_support: true
      when: service_k8s_support

    - name: Set software as service_k8s
      ansible.builtin.set_fact:
        software_stack: "service_k8s"
      when: service_k8s_support


- name: Validate compute k8s playbook
  when: compute_k8s_playbook is defined
  block:
    - name: Set k8s_support to true when compute_k8s_support is true
      ansible.builtin.set_fact:
        k8s_support: true
      when: compute_k8s_support

    - name: Set software as compute_k8s
      ansible.builtin.set_fact:
        software_stack: "k8s"
      when: compute_k8s_support

- name: Check if slurm support is true
  ansible.builtin.set_fact:
    slurm_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'slurm') | list | length > 0 }}"

- name: Check if nvidia gpu operator support is true
  ansible.builtin.set_fact:
    nvidia_gpu_operator_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'nvidia_gpu_operator') | list | length > 0 }}"

- name: Set facts for cluster
  ansible.builtin.set_fact:
    cluster_os_type: "{{ software_config.cluster_os_type }}"
    cluster_os_version: "{{ software_config.cluster_os_version }}"

- name: Check if csi powerscale driver installation is required
  ansible.builtin.set_fact:
    csi_driver_powerscale_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'csi_driver_powerscale') | list | length > 0 }}"

- name: Load csi_driver_powerscale.json
  ansible.builtin.set_fact:
    csi_driver_powerscale_packages_json: "{{ lookup('file', csi_driver_powerscale_packages_file) | from_json }}"
  when: csi_driver_powerscale_support

- name: Check if ucx is true
  ansible.builtin.set_fact:
    ucx_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'ucx') | list | length > 0 }}"

- name: Validate ucx version when ucx is required
  when: ucx_support is true
  block:
    - name: Get ucx version
      ansible.builtin.set_fact:
        ucx_version: "{{ item.version }}"
      loop: "{{ software_config.softwares | default([]) }}"
      when:
        - "'ucx' in item.name"
        - item.version is defined
      loop_control:
        loop_var: item

    - name: Assert ucx version
      ansible.builtin.assert:
        that:
          - ucx_version | default("", true) | length > 1
        success_msg: "{{ success_msg_ucx_version }}"
        fail_msg: "{{ fail_msg_ucx_version }}"

- name: Check if openmpi is true
  ansible.builtin.set_fact:
    openmpi_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'openmpi') | list | length > 0 }}"

- name: Validate openmpi version when openmpi is required
  when: openmpi_support is true
  block:
    - name: Get openmpi version
      ansible.builtin.set_fact:
        openmpi_version: "{{ item.version }}"
      loop: "{{ software_config.softwares | default([]) }}"
      when:
        - "'openmpi' in item.name"
        - item.version is defined
      loop_control:
        loop_var: item

    - name: Assert openmpi version
      ansible.builtin.assert:
        that:
          - openmpi_version | default("", true) | length > 1
        success_msg: "{{ success_msg_openmpi_version }}"
        fail_msg: "{{ fail_msg_openmpi_version }}"

- name: Validate nvidia gpu operator version when nvidia gpu operator is required
  when: nvidia_gpu_operator_support is true
  block:
    - name: Get nvidia gpu operator version
      ansible.builtin.set_fact:
        nvidia_gpu_operator_version: "{{ item.version }}"
      loop: "{{ software_config.softwares | default([]) }}"
      when:
        - "'nvidia_gpu_operator' in item.name"
        - item.version is defined
      loop_control:
        loop_var: item

    - name: Assert nvidia gpu operator version
      ansible.builtin.assert:
        that:
          - nvidia_gpu_operator_version | default("", true) | length > 1
        success_msg: "{{ success_msg_nvidia_gpu_operator_version }}"
        fail_msg: "{{ fail_msg_nvidia_gpu_operator_version }}"

    - name: Fail when nvidia_gpu_operator_support is true and k8s_support is false
      ansible.builtin.fail:
        msg: "{{ fail_msg_k8s_support_false }}"
      when: not k8s_support

- name: Prepare kubernetes installation variables
  when: k8s_support is true
  block:
    - name: Extract k8s version
      ansible.builtin.set_fact:
        k8s_version: "{{ software_config.softwares | selectattr('name', 'equalto', software_stack) | map(attribute='version') | first }}"
      # noqa: var-naming[no-jinja]

    - name: Load k8s.json
      ansible.builtin.set_fact:
        k8s_packages_json: "{{ lookup('file', k8s_packages_file) | from_json }}"

    - name: Extract and set facts for tarball URLs
      ansible.builtin.set_fact:
        kubeadm_package: "kubeadm"
        kubectl_package: "kubectl"
        kubelet_package: "kubelet"
        crictl_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'crictl') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        calicoctl_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'calicoctl') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        calico_crds_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'calico.archive') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        cni_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'cni') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        nerdctl_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'nerdctl') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        runc_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'runc') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        etcd_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'etcd') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        containerd_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'containerd') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        helm_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'helm') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        mpi_operator: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'manifest') | selectattr('package', 'search', 'mpi') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        python_package: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'rpm') | selectattr('package', 'search', 'python3.11') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        xilinx_device_plugin_pkg: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'manifest') | selectattr('package', 'search', 'xilinx-device-plugin') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        nfs_subdir_external_provisioner_pkg: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'nfs-subdir-external-provisioner') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        whereabouts_pkg: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'git') | selectattr('package', 'search', 'whereabouts') | map(attribute='package') | join }}" # noqa: yaml[line-length]
        multus_daemonset_pkg: "{{ k8s_packages_json[software_stack]['cluster'] | selectattr('type', 'equalto', 'manifest') | selectattr('package', 'search', 'multus-daemonset') | map(attribute='package') | join }}" # noqa: yaml[line-length]
    - name: Conditional logic for kubeadm, kubectl, and kubelet packages # noqa: no-jinja-when
      ansible.builtin.set_fact:
        kubeadm_package: "kubeadm-v{{ hostvars['localhost']['k8s_version'] }}"
        kubectl_package: "kubectl-v{{ hostvars['localhost']['k8s_version'] }}"
        kubelet_package: "kubelet-v{{ hostvars['localhost']['k8s_version'] }}"
     # when: k8s_version != '{{ omnia161_k8s_version }}'

  rescue:
    - name: Unable to fetch k8s version
      ansible.builtin.fail:
        msg: "{{ k8s_version_fail_msg }}"

- name: Get intelgaudi input status
  ansible.builtin.set_fact:
    set_intelgaudi_input_status: true
  loop: "{{ software_config.softwares | default([]) }}"
  when:
    - "'intelgaudi' in item.name"
  loop_control:
    loop_var: item

- name: Set set_intel_config_status
  when: set_intelgaudi_input_status
  block:
    - name: Fetch intelgaudi_version
      ansible.builtin.set_fact:
        intelgaudi_version: "{{ software_config.softwares | selectattr('name', 'equalto', 'intelgaudi') | map(attribute='version') | first }}"
  rescue:
    - name: Failed - Intel gaudi version check
      ansible.builtin.fail:
        msg: "{{ intelgaudi_version_warning_msg }}"

- name: Set intel input status
  ansible.builtin.set_fact:
    set_intel_input_status: true
  loop: "{{ software_config.intelgaudi | default([]) }}"
  when: "set_intelgaudi_input_status and 'intel' in item.name"
  loop_control:
    loop_var: item

- name: Intel Gaudi will not be installed
  ansible.builtin.pause:
    prompt: "{{ intel_gaudi_input_fail_msg }}"
    seconds: "{{ warning_time }}"
  when:
    - set_intelgaudi_input_status
    - not set_intel_input_status

- name: Set set_intel_config_status
  when: set_intel_input_status
  block:
    - name: Set intel_directory
      ansible.builtin.set_fact:
        intel_directory: "{{ offline_intel_directory }}/intel/{{ intelgaudi_version }}/"

    - name: Check intel_directory exists or not
      ansible.builtin.stat:
        path: "{{ intel_directory }}"
      register: check_intel_dir

    - name: Warning - Please wait, This task will take few seconds
      ansible.builtin.pause:
        seconds: "{{ warning_time }}"
        prompt: "{{ intel_gaudi_repo_fail_msg }}"
      when: not check_intel_dir.stat.exists

    - name: Set set_intel_config_status to true
      ansible.builtin.set_fact:
        set_intel_config_status: true
      when: check_intel_dir.stat.exists
  rescue:
    - name: Intel Gaudi repo is not configured
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ intel_gaudi_repo_fail_msg }}"

- name: Local local_repo_access.yml file
  ansible.builtin.include_vars: "{{ local_repo_access_dest_path }}"

- name: Check if utils support is true
  ansible.builtin.set_fact:
    utils_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'utils') | list | length > 0 }}"

# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Define project input path
  ansible.builtin.set_fact:
    project_input_path: "{{ hostvars['localhost']['input_project_dir'] }}"
    update_metadata: false
    show_softwares_status: false

- name: Process and configure local_repo_config
  ansible.builtin.include_tasks: process_rpm_repo.yml

- name: Encrypt user certificates if exist
  cert_vault_handler:
    mode: encrypt
    log_dir: "{{ base_path }}"
    key_path: "{{ project_input_path }}"
  register: vault_result

- name: Execute tasks for each group
  ansible.builtin.include_tasks: execute_parallel_tasks.yml
  loop: "{{ result.software_dict | dict2items }}"
  loop_control:
    loop_var: item
  register: task_result

- name: Clear the rpm downloaded files
  ansible.builtin.file:
    path: "{{ repo_store_path }}/cluster/{{ cluster_os_type }}/{{ cluster_os_version }}/rpm"
    state: absent
  when: clean_rpms

- name: Determine final repository status
  ansible.builtin.set_fact:
    final_status: "{{ 'SUCCESS' if 'FAILURE' not in (overall_status_dict | default({}) | dict2items | map(attribute='value') | list) and
                      'TIMEOUT' not in (overall_status_dict | default({}) | dict2items | map(attribute='value') | list) and
                      'PARTIAL' not in (overall_status_dict | default({}) | dict2items | map(attribute='value') | list)
                      else 'FAILED' }}"

- name: Check if metadata file exists
  ansible.builtin.stat:
    path: "{{ metadata_file_path }}"
  register: metadata_file

- name: Set update metadata flag
  ansible.builtin.set_fact:
    update_metadata: "{{ true | bool }}"
  when:
    - metadata_file.stat.exists
    - final_status == 'SUCCESS'

- name: Persist local repoitory information into metadata file localrepo_metadata.yml
  localrepo_metadata_manager:
    software_config_path: "{{ sw_config_json_path }}"
    localrepo_config_path: "{{ local_repo_config_path }}"
    output_file: "{{ metadata_file_path }}"
    update_metadata: "{{ update_metadata }}"
  register: policy_result
  when:
    - final_status == 'SUCCESS'

- name: Update metadata for each software type if final_status is SUCCESS
  ansible.builtin.include_tasks: create_k8s_local_repo_metadata.yml
  loop: "{{ software_cleanup_list }}"
  loop_control:
    loop_var: software_entry
  when:
    - final_status == 'SUCCESS'
    - software_entry.enabled

- name: Show updated keys
  ansible.builtin.debug:
    var: policy_result.diff
  when: update_metadata

- name: Run custom parallel task to print overall software status
  parallel_tasks:
    tasks: []
    software: []
    local_repo_config_path: "{{ local_repo_config_path }}"
    overall_status_dict: "{{ overall_status_dict }}"
    show_softwares_status: "{{ true | bool }}"
  register: status_results
  when: overall_status_dict is defined and overall_status_dict | length > 0

- name: Print overall software status
  ansible.builtin.debug:
    msg: "{{ status_results.msg.split('\n') if status_results.msg is defined else sw_download_msg }}"

- name: Local repository status
  ansible.builtin.debug:
    msg: "{{ 'localrepository SUCCESS' if final_status == 'SUCCESS' else 'localrepository failed. because some of the packages status are FAILED' }}"
  failed_when: final_status != 'SUCCESS'

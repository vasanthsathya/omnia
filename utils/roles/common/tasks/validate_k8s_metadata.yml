#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Validate input passed to playbook
  when: k8s_support or service_k8s_support
  block:
    - name: Fail if cluster_name is not passed as an argument to the playbook
      ansible.builtin.fail:
        msg: "{{ cluster_name_not_passed }}"
      when: cluster_name is not defined

    - name: Set facts for service and compute clusters
      ansible.builtin.set_fact:
        all_service_clusters: "{{ service_k8s_cluster | map(attribute='cluster_name') | list }}"
        all_compute_clusters: "{{ compute_k8s_cluster | map(attribute='cluster_name') | list }}"

    - name: Check if cluster is in service_k8s_cluster
      ansible.builtin.set_fact:
        cluster_found: true
        cluster_var_name: "service_k8s_cluster"
      when: cluster_name in all_service_clusters

    - name: Check if cluster is in compute_k8s_cluster
      ansible.builtin.set_fact:
        cluster_found: true
        cluster_var_name: "compute_k8s_cluster"
      when: cluster_name in all_compute_clusters and cluster_found is not defined

    - name: Fail if cluster name not found
      ansible.builtin.fail:
        msg: "{{ cluster_name_not_found }}"
      when: cluster_found is not defined

    - name: Set facts for remove node
      ansible.builtin.set_fact:
        warning_msg: "[WARNING] This utility will remove {{ cluster_name }} Kubernetes configuration from node hence job scheduling needs to be disabled.\nAbort play if any jobs are running on the given kube node.\nRecommended to drain the node." # noqa: yaml[line-length]
        confirmation_msg: "Are you sure you want to remove {{ cluster_name }} configuration from kube node? Type 'yes' to proceed."
        confirmation_fail_msg: "Remove node configuration confirmation failed"
      when: remove_node is defined

    - name: Set facts for reset cluster
      ansible.builtin.set_fact:
        warning_msg: "[WARNING] This utility will reset {{ cluster_name }} Kubernetes configuration."
        confirmation_msg: "Are you sure you want to reset {{ cluster_name }} cluster configuration? Type 'yes' to proceed."
        confirmation_fail_msg: "Cluster reset confirmation failed."
      when: reset_cluster is defined

    - name: Warning message for removing {{ cluster_name }}
      ansible.builtin.pause:
        prompt: "{{ warning_msg }}"
        seconds: "{{ warning_wait_time }}"
      run_once: true

    - name: Confirmation required to proceed
      ansible.builtin.pause:
        prompt: "{{ confirmation_msg }}"
      register: pause_result
      when:
        - not (skip_confirmation | default(false) | bool)

    - name: Fail if user does not confirm deletion
      ansible.builtin.fail:
        msg: "{{ confirmation_fail_msg }}"
      when: pause_result.user_input | default('yes') != 'yes'

    - name: Set facts when service_k8s_cluster
      ansible.builtin.set_fact:
        k8s_version: "{{ service_k8s_version }}"
        k8s_support: "{{ service_k8s_support }}"
      when: cluster_var_name == "service_k8s_cluster"

    - name: Get the cluster details of cluster_name
      ansible.builtin.set_fact:
        selected_cluster: >-
          {{ vars[cluster_var_name]
              | selectattr('cluster_name', 'equalto', cluster_name)
              | list
              | first }}

    - name: Set cluster configuration facts
      ansible.builtin.set_fact:
        k8s_service_addresses: "{{ selected_cluster.k8s_service_addresses }}"
        k8s_pod_network_cidr: "{{ selected_cluster.k8s_pod_network_cidr }}"

- name: Validate k8s metadata
  when: k8s_support
  block:
    - name: Check if the k8s metadata file exists
      ansible.builtin.stat:
        path: "{{ metadata_file }}"
      register: metadata_stat

    - name: Fail if k8s metadata file does not exist
      ansible.builtin.fail:
        msg: "{{ k8s_metadata_file_not_exist_msg }}"
      when: not metadata_stat.stat.exists

    - name: Read k8s metadata file
      ansible.builtin.slurp:
        src: "{{ metadata_file }}"
      register: metadata_content
      when: metadata_stat.stat.exists

    - name: Parse YAML
      ansible.builtin.set_fact:
        metadata_dict: "{{ metadata_content.content | b64decode | from_yaml }}"

    - name: Check if the given k8s version exists in metadata
      ansible.builtin.set_fact:
        matched_kubespray_version: "{{ metadata_dict.k8s_kubespray_versions[k8s_version] }}"
      when: k8s_version in metadata_dict.k8s_kubespray_versions

    - name: Fail if k8s version is not found in metadata
      ansible.builtin.fail:
        msg: "{{ k8s_version_failed_msg }}"
      when: k8s_version not in metadata_dict.k8s_kubespray_versions

    - name: Show result
      ansible.builtin.debug:
        msg: "Kubernetes version {{ k8s_version }} maps to Kubespray version {{ matched_kubespray_version }}"
      when: k8s_version in metadata_dict.k8s_kubespray_versions

# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Generate safe file name for image
  ansible.builtin.set_fact:
    safe_image_name: "{{ image | regex_replace('[:/]', '_') }}"

- name: Generate tar and digest path
  ansible.builtin.set_fact:
    image_tar_path: "{{ images_directory_path }}/{{ safe_image_name }}.tar"
    image_digest_path: "{{ images_directory_path }}/.{{ safe_image_name }}.digest"

- name: Check if {{ image }} image tar exists # noqa: name[template]
  ansible.builtin.stat:
    path: "{{ image_tar_path }}"
  register: tar_file_check

- name: Check if {{ image }} digest file exists # noqa: name[template]
  ansible.builtin.stat:
    path: "{{ image_digest_path }}"
  register: digest_file_check

- name: Get {{ image }} image info # noqa: name[template]
  containers.podman.podman_image_info:
    name: "{{ image }}"
  register: image_info
  changed_when: false

- name: Set current digest from image info
  ansible.builtin.set_fact:
    current_digest: "{{ image_info.images[0].Digest }}"
  when:
    - image_info.images | length > 0

- name: Read previous digest if exists
  ansible.builtin.slurp:
    src: "{{ image_digest_path }}"
  register: previous_digest
  when: digest_file_check.stat.exists

- name: Determine if {{ image }} image changed # noqa: name[template]
  ansible.builtin.set_fact:
    image_changed: "{{ (previous_digest.content | b64decode).strip() != current_digest }}"
  when:
    - digest_file_check.stat.exists
    - tar_file_check.stat.exists
    - image_info.images | length > 0

- name: Assume image changed if digest file doesn't exist
  ansible.builtin.set_fact:
    image_changed: true
  when:
    - not digest_file_check.stat.exists
    - tar_file_check.stat.exists

- name: Remove old tar and digest if image changed
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ image_tar_path }}"
    - "{{ image_digest_path }}"
  when: image_changed | default(true)

- name: Save image as tar
  block:

    - name: Save {{ image }} image as tar at {{ image_tar_path }} (this may take a few minutes) # noqa: name[template]
      containers.podman.podman_save:
        image: "{{ image }}"
        dest: "{{ image_tar_path }}"
      register: saved_result
      when:
        - image_changed | default(true) or not tar_file_check.stat.exists

    - name: Add image to saved list if it was saved
      ansible.builtin.set_fact:
        saved_images: "{{ saved_images + [image] }}"
      when: saved_result is defined and saved_result is changed

    - name: Save current digest
      ansible.builtin.copy:
        content: "{{ current_digest }}"
        dest: "{{ image_digest_path }}"
        mode: "{{ read_write_mode }}"
      when:
        - image_changed | default(true) or not tar_file_check.stat.exists
        - saved_result is defined and saved_result is changed

  rescue:

    - name: Cleanup tar if save operation failure
      ansible.builtin.file:
        path: "{{ image_tar_path }}"
        state: absent

    - name: Cleanup digest if save operation failure
      ansible.builtin.file:
        path: "{{ image_digest_path }}"
        state: absent

    - name: Failed to save the image
      ansible.builtin.debug:
        msg: "Image {{ image }} save failed and partial tar and digest was removed."

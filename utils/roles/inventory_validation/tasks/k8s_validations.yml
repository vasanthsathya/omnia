#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Invalid inventory format for Kube
  ansible.builtin.fail:
    msg: "{{ invalid_kube_inventory_fail_msg }}"
  when:
    - "('kube_control_plane' not in groups or 'kube_node' not in groups or 'etcd' not in groups)"

- name: Ensure correct Kubernetes in non-HA setup
  when:
    - cluster_type != "unknown"
    - not enable_k8s_ha
  block:
    - name: Kube control plane group to contain at least 1 kube control plane
      ansible.builtin.assert:
        that:
          - "((groups['kube_control_plane'] | length | int) >= 1)"
        success_msg: "{{ kube_one_node_validation_success_msg }}"
        fail_msg: "{{ kube_control_plane_validation_fail_msg }}"

    - name: Warning Kube control plane group contain multiple kube control plane
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ kube_nonha_setup_warning_msg }}"
      when:
        - groups['kube_control_plane'] | length | int > 1

- name: Ensure correct Kubernetes in HA setup
  when:
    - cluster_type != "unknown"
    - enable_k8s_ha
  block:
    - name: Kube control plane group to contain more than 1 kube control plane
      ansible.builtin.assert:
        that:
          - "((groups['kube_control_plane'] | length | int) > 1)"
        success_msg: "{{ kube_one_node_validation_success_msg }}"
        fail_msg: "{{ kube_control_plane_ha_validation_fail_msg }}"

    - name: Warning Kube control plane group contain even number of nodes in the inventory
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ kube_ha_setup_warning_msg }}"
      when:
        - ((groups['kube_control_plane'] | length | int) % 2) == 0

- name: Etcd node group to contain atleast 1 etcd node
  ansible.builtin.assert:
    that: "((groups['etcd'] | length | int) % 2) == 1"
    success_msg: "{{ etcd_node_validation_success_msg }}"
    fail_msg: "{{ etcd_node_validation_fail_msg }}"

- name: Add all hosts in kube_control_plane and kube_node to group k8s_cluster
  ansible.builtin.add_host:
    name: '{{ item }}'
    groups: k8s_cluster
  with_items:
    - "{{ groups['kube_control_plane'] }}"
    - "{{ groups['kube_node'] }}"

- name: Add all hosts in k8s_cluster and etcd to group k8s_cluster_all
  ansible.builtin.add_host:
    name: '{{ item }}'
    groups: k8s_cluster_all
  with_items:
    - "{{ groups['k8s_cluster'] }}"
    - "{{ groups['etcd'] }}"

- name: Place the inventory into the kubespray nfs share
  when: cluster_type != "unknown"
  block:
    - name: Set fact inventory file paths
      ansible.builtin.set_fact:
        user_inventory_path: "{{ ansible_inventory_sources[0] }}"
        omnia_inventory_path: "{{ cluster_layout_path }}"

    - name: Create a directory to store inventory
      ansible.builtin.file:
        path: "{{ k8s_nfs_share }}"
        state: directory
        mode: "{{ file_mode }}"

    - name: Inventory not provided ,copy omnia generated inventory to kubespray nfs share
      ansible.builtin.copy:
        src: "{{ omnia_inventory_path }}"
        dest: "{{ k8s_nfs_share }}/inv_k8s"
        mode: "{{ file_perm }}"
      when:
        - user_inventory_path is defined
        - (user_inventory_path | length == 0)
        - cluster_layout_check.stat.exists

    - name: Inventory provided ,copy user inventory to nfs share
      ansible.builtin.copy:
        src: "{{ user_inventory_path }}"
        dest: "{{ k8s_nfs_share }}/inv_k8s"
        mode: "{{ file_perm }}"
      when:
        - user_inventory_path is defined
        - (user_inventory_path | length > 0)
